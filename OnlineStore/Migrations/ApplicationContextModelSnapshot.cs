// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore;

#nullable disable

namespace OnlineStore.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnlineStore.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuyerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerLogin");

                    b.HasIndex("ProductId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("OnlineStore.Entities.Card", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<string>("BuyerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Number");

                    b.HasIndex("BuyerLogin");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("OnlineStore.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineStore.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeServiceNumber")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeLogin");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("OnlineStore.Entities.Import", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("OnlineStore.Entities.Issuance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issuances");
                });

            modelBuilder.Entity("OnlineStore.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2022, 7, 20, 19, 42, 46, 812, DateTimeKind.Local).AddTicks(2716),
                            UserName = "ilyad"
                        });
                });

            modelBuilder.Entity("OnlineStore.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuyerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeServiceNumber")
                        .HasColumnType("int");

                    b.Property<int>("IdIssuance")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyerLogin");

                    b.HasIndex("EmployeeLogin");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineStore.Entities.Phone", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("IssuanceId")
                        .HasColumnType("int");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("IssuanceId");

                    b.HasIndex("UserLogin");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("OnlineStore.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImportId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("OnlineStore.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("OnlineStore.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("OnlineStore.Entities.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineStore.Entities.Buyer", b =>
                {
                    b.HasBaseType("OnlineStore.Entities.User");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("OnlineStore.Entities.Employee", b =>
                {
                    b.HasBaseType("OnlineStore.Entities.User");

                    b.Property<string>("ManagerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ManagerServiceNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceNumber")
                        .HasColumnType("int");

                    b.HasIndex("ManagerLogin");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("OnlineStore.Entities.Manager", b =>
                {
                    b.HasBaseType("OnlineStore.Entities.User");

                    b.Property<string>("Departament")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceNumber")
                        .HasColumnType("int");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("OnlineStore.Entities.Assessment", b =>
                {
                    b.HasOne("OnlineStore.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Entities.Card", b =>
                {
                    b.HasOne("OnlineStore.Entities.Buyer", "Buyer")
                        .WithMany("Cards")
                        .HasForeignKey("BuyerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("OnlineStore.Entities.Delivery", b =>
                {
                    b.HasOne("OnlineStore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeLogin");

                    b.HasOne("OnlineStore.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Entities.Import", b =>
                {
                    b.HasOne("OnlineStore.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineStore.Entities.Order", b =>
                {
                    b.HasOne("OnlineStore.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeLogin");

                    b.Navigation("Buyer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("OnlineStore.Entities.Phone", b =>
                {
                    b.HasOne("OnlineStore.Entities.Issuance", "Issuance")
                        .WithMany("Phones")
                        .HasForeignKey("IssuanceId");

                    b.HasOne("OnlineStore.Entities.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Entities.Product", b =>
                {
                    b.HasOne("OnlineStore.Entities.Category", "Сategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("OnlineStore.Entities.Import", null)
                        .WithMany("Products")
                        .HasForeignKey("ImportId");

                    b.HasOne("OnlineStore.Entities.Order", null)
                        .WithMany("Product")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineStore.Entities.Request", null)
                        .WithMany("Products")
                        .HasForeignKey("RequestId");

                    b.HasOne("OnlineStore.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Сategory");
                });

            modelBuilder.Entity("OnlineStore.Entities.Request", b =>
                {
                    b.HasOne("OnlineStore.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("OnlineStore.Entities.Buyer", b =>
                {
                    b.HasOne("OnlineStore.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineStore.Entities.Buyer", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Entities.Employee", b =>
                {
                    b.HasOne("OnlineStore.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineStore.Entities.Employee", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Entities.Manager", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("OnlineStore.Entities.Manager", b =>
                {
                    b.HasOne("OnlineStore.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineStore.Entities.Manager", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Entities.Import", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Entities.Issuance", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("OnlineStore.Entities.Order", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Entities.Request", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Entities.User", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("OnlineStore.Entities.Buyer", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("OnlineStore.Entities.Manager", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
